{"version":3,"sources":["components/Filter.js","components/PersonForm.js","components/Person.js","components/Persons.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Filter","nameFilter","onInputChangeHandler","onClearClickHandler","value","onChange","type","onClick","PersonForm","onSubmit","nameValue","onNameChange","numberValue","onNumberChange","onClearClick","Person","person","deletePersonHandler","name","number","id","Persons","persons","nameFilterText","length","map","key","baseUrl","axios","get","then","response","data","newObject","post","delete","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setNameFilter","notificationMessage","setNotificationMessage","notificationType","setNotificationType","Notification","message","className","MakeNotification","timeout","setTimeout","useEffect","personService","initialPersons","catch","error","clearNewPerson","personsToShow","nameFilterRegex","RegExp","filter","match","event","target","preventDefault","alert","newPerson","returnedPerson","concat","errorMessage","personId","find","p","window","confirm","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"qMAWeA,EATA,SAAC,GAA6D,IAA5DC,EAA2D,EAA3DA,WAAYC,EAA+C,EAA/CA,qBAAsBC,EAAyB,EAAzBA,oBACjD,OACE,kDACkB,2BAAOC,MAAOH,EAAYI,SAAUH,IACtD,4BAAQI,KAAK,SAASC,QAASJ,GAA/B,WCWWK,EAfI,SAAC,GAAoF,IAAnFC,EAAkF,EAAlFA,SAAUC,EAAwE,EAAxEA,UAAWC,EAA6D,EAA7DA,aAAcC,EAA+C,EAA/CA,YAAaC,EAAkC,EAAlCA,eAAgBC,EAAkB,EAAlBA,aACnF,OACE,6BACI,0BAAML,SAAUA,GACZ,sCAAW,2BAAOL,MAAOM,EAAWL,SAAUM,KAC9C,wCAAa,2BAAOP,MAAOQ,EAAaP,SAAUQ,KAClD,6BACA,4BAAQP,KAAK,SAASC,QAASO,GAA/B,SACA,4BAAQR,KAAK,UAAb,WCCGS,EATA,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,OAAQC,EAAyB,EAAzBA,oBACvB,OACE,6BACE,8BAAOD,EAAOE,MADhB,IAC6B,8BAAOF,EAAOG,QACzC,4BAAQZ,QAAU,kBAAKU,EAAoBD,EAAOI,MAAlD,YCqBSC,EAxBC,SAAC,GAAgD,IAA/CC,EAA8C,EAA9CA,QAASrB,EAAqC,EAArCA,WAAYgB,EAAyB,EAAzBA,oBAC7BM,EAAiBtB,EAAU,6CAAyCA,GAAe,qBACzF,OAAGqB,EAAQE,OAAS,EAEZ,6BACI,6BAAK,4BAAKD,IACV,6BACI,4BACKD,EAAQG,KAAI,SAAAT,GAAM,OACf,kBAAC,EAAD,CAAQU,IAAKV,EAAOE,KAAMF,OAAQA,EAAQC,oBAAqBA,UAQnF,6BACG,6BAAK,4BAAKM,IACV,6BAAK,wD,gBCrBVI,EAAU,eAsBD,EApBA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAkB5B,EAfA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVC,SAACZ,GAEf,OADgBQ,IAAMO,OAAN,UAAgBR,EAAhB,YAA2BP,IAC5BU,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SC0H5BI,EAjIH,WAAO,IAAD,EACeC,mBAAS,IADxB,mBACRf,EADQ,KACCgB,EADD,OAEgBD,mBAAS,IAFzB,mBAERE,EAFQ,KAECC,EAFD,OAGoBH,mBAAS,IAH7B,mBAGRI,EAHQ,KAGGC,EAHH,OAIsBL,mBAAS,IAJ/B,mBAIRpC,EAJQ,KAII0C,EAJJ,OAKwCN,mBAAS,MALjD,mBAKRO,EALQ,KAKaC,EALb,OAMkCR,mBAAS,MAN3C,mBAMRS,EANQ,KAMUC,EANV,KAQVC,EAAe,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,QAAS3C,EAAW,EAAXA,KAC/B,OAAgB,OAAZ2C,EACK,KAGP,yBAAKC,UAAW5C,GACb2C,IAIDE,EAAmB,SAACF,EAAS3C,EAAM8C,GACvCP,EAAuBI,GACvBF,EAAoBzC,GACpB+C,YAAW,WACTR,EAAuB,MACvBE,EAAoB,QACnBK,IAaLE,qBAVwB,WACtBC,IAEGzB,MAAK,SAAA0B,GACJlB,EAAWkB,MAEZC,OAAM,SAAAC,GACLP,EAAiB,0DAA2D,QAAS,UAGhE,IAE3B,IAAMQ,EAAiB,WACrBnB,EAAW,IACXE,EAAa,KAkDXkB,EAAgBtC,EACpB,GAAkB,KAAfrB,EAAkB,CACnB,IAAM4D,EAAkBC,OAAO,IAAD,OAAK7D,IACnC2D,EAAgBtC,EAAQyC,QAAO,SAAA/C,GAAM,OAAIA,EAAOE,KAAK8C,MAAMH,MAG7D,OACE,6BACE,6BACE,yCACA,kBAACb,EAAD,CAAcC,QAASL,EAAqBtC,KAAMwC,IAClD,kBAAC,EAAD,CACE7C,WAAYA,EACZC,qBAAsB,SAAC+D,GAAYtB,EAAcsB,EAAMC,OAAO9D,QAC9DD,oBAlBgB,WACtBwC,EAAc,QAqBZ,6BACE,gDACA,kBAAC,EAAD,CACElC,SApEU,SAACwD,GAGjB,GAFAA,EAAME,iBAES,KAAZ5B,GAAgC,KAAdE,EAEnB,OADA2B,MAAM,yCACC,EAGT,IAAMC,EAAY,CAChBnD,KAAMqB,EACNpB,OAAQsB,GAEVc,EACUc,GACPvC,MAAK,SAAAwC,GACJhC,EAAWhB,EAAQiD,OAAOD,IAC1BX,IACAR,EAAiB,GAAD,OAAImB,EAAepD,KAAnB,kCAAyD,UAAW,QAErFuC,OAAM,SAAAC,GACL,IAAMc,EAAed,EAAM3B,SAASC,KAAK0B,MACzCP,EAAiB,oBAAD,OAAqBkB,EAAUnD,KAA/B,+CAA0EsD,GAAgB,QAAS,SAgDjH9D,UAAW6B,EACX5B,aAAc,SAACsD,GAAYzB,EAAWyB,EAAMC,OAAO9D,QACnDQ,YAAa6B,EACb5B,eAAgB,SAACoD,GAAYvB,EAAauB,EAAMC,OAAO9D,QACvDU,aAAc6C,KAIlB,6BACE,uCACA,kBAAC,EAAD,CAASrC,QAASsC,EAAe3D,WAAYA,EAAYgB,oBAtDnC,SAACwD,GAC3B,IAAMzD,EAASM,EAAQoD,MAAK,SAAAC,GAAC,OAAIA,EAAEvD,KAAOqD,KAC1C,IAAIG,OAAOC,QAAP,iBAAyB7D,EAAOE,KAAhC,MACF,OAAO,EAGTqC,EACWkB,GACR3C,MAAK,WACJQ,EAAWhB,EAAQyC,QAAO,SAAC/C,GAAD,OAAYA,EAAOI,KAAOqD,MACpDtB,EAAiB,GAAD,OAAInC,EAAOE,KAAX,kCAAiD,UAAW,QAE7EuC,OAAM,SAAAC,GACLpB,EAAWhB,EAAQyC,QAAO,SAAC/C,GAAD,OAAYA,EAAOI,KAAOqD,MACpDtB,EAAiB,qBAAD,OAAsBnC,EAAOE,KAA7B,6BAA8D,QAAS,cC/E3E4D,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAAShB,MACvB,2DCZNiB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1D,MAAK,SAAA2D,GACJA,EAAaC,gBAEdjC,OAAM,SAAAC,GACLiC,QAAQjC,MAAMA,EAAMT,a","file":"static/js/main.1629fc11.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = ({nameFilter, onInputChangeHandler, onClearClickHandler}) => {\n  return (\n    <div>\n    filter shown with <input value={nameFilter} onChange={onInputChangeHandler} />\n    <button type=\"button\" onClick={onClearClickHandler}>clear</button>\n  </div>\n  )\n}\n\nexport default Filter","import React from 'react'\n\nconst PersonForm = ({onSubmit, nameValue, onNameChange, numberValue, onNumberChange, onClearClick}) => {\n  return (\n    <div>\n        <form onSubmit={onSubmit}>\n            <div>name: <input value={nameValue} onChange={onNameChange} /></div>\n            <div>number: <input value={numberValue} onChange={onNumberChange} /></div>\n            <div>\n            <button type=\"button\" onClick={onClearClick}>clear</button>\n            <button type=\"submit\">add</button>\n            </div>\n        </form>\n        </div>\n  )\n}\n\nexport default PersonForm","import React from 'react'\n\nconst Person = ({person, deletePersonHandler}) => {\n  return (\n    <div>\n      <span>{person.name}</span> <span>{person.number}</span>\n      <button onClick={ ()=> deletePersonHandler(person.id) }>delete</button>\n    </div>\n  )\n}\n\nexport default Person","import React from 'react'\nimport Person from './Person'\n\nconst Persons = ({persons, nameFilter, deletePersonHandler}) => {\n    const nameFilterText = nameFilter ? `Filtering by names that start with ${nameFilter}` : \"No filters applied\"\n    if(persons.length > 0){\n        return (\n            <div>\n                <div><em>{nameFilterText}</em></div>\n                <div>\n                    <ul>\n                        {persons.map(person => \n                            <Person key={person.name} person={person} deletePersonHandler={deletePersonHandler} />\n                        )}\n                    </ul>\n                </div>\n            </div>\n        )\n    }\n    return (\n        <div>\n           <div><em>{nameFilterText}</em></div>\n           <div><strong> No persons found</strong></div>\n        </div>\n    )\n}\n\nexport default Persons","import axios from 'axios'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst destroy = (id) => {\n  const request = axios.delete(`${baseUrl}/${id}`)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, destroy }\n","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport personService from './services/persons'\nimport './index.css'\n\n\nconst App = () => {\n  const [ persons, setPersons] = useState([]) \n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ nameFilter, setNameFilter ] = useState('')\n  const [ notificationMessage, setNotificationMessage ] = useState(null)\n  const [ notificationType, setNotificationType ] = useState(null)\n\n  const Notification = ({ message, type }) => {\n    if (message === null) {\n      return null\n    }\n    return (\n      <div className={type}>\n        {message}\n      </div>\n    )\n  }\n  const MakeNotification = (message, type, timeout) =>{\n    setNotificationMessage(message)\n    setNotificationType(type)\n    setTimeout(() => {\n      setNotificationMessage(null)\n      setNotificationType(null)\n    }, timeout)\n  }\n\n  const loadPersonsHook = () => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n      .catch(error => {\n        MakeNotification(`Unable to get persons because of an error in the server`, \"error\", 5000)\n      })\n  }\n  useEffect(loadPersonsHook, [])\n\n  const clearNewPerson = () => {\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const addPerson = (event) => {\n    event.preventDefault()\n    // Check the name and number are not empty strings\n    if(newName === \"\" || newNumber === \"\"){\n      alert(\"Name and/or number must not be empty\")\n      return false\n    }\n    \n    const newPerson = {\n      name: newName,\n      number: newNumber\n    }\n    personService\n      .create(newPerson)\n      .then(returnedPerson => {\n        setPersons(persons.concat(returnedPerson))\n        clearNewPerson()\n        MakeNotification(`${returnedPerson.name} has been successfully created`, \"success\", 5000)\n      })\n      .catch(error => {\n        const errorMessage = error.response.data.error\n        MakeNotification(`Unable to create ${newPerson.name} because of an error in the server; ${errorMessage}`, \"error\", 5000)\n      })\n  }\n\n  const deletePersonHandler = (personId) => {\n    const person = persons.find(p => p.id === personId)\n    if(!window.confirm(`Delete ${person.name}?`)){\n      return false\n    }\n\n    personService\n      .destroy(personId)\n      .then(() => {\n        setPersons(persons.filter((person) => person.id !== personId ))\n        MakeNotification(`${person.name} has been successfully deleted`, \"success\", 5000)\n      })\n      .catch(error => {\n        setPersons(persons.filter((person) => person.id !== personId ))\n        MakeNotification(`Unable to destroy ${person.name} because it doesn't exist`, \"error\", 5000)\n      })\n  }\n\n  const clearNameFilter = () => {\n    setNameFilter('')\n  }\n\n  let personsToShow = persons;\n  if(nameFilter !== ''){\n    const nameFilterRegex = RegExp(`^${nameFilter}`)\n    personsToShow = persons.filter(person => person.name.match(nameFilterRegex))\n  }\n\n  return (\n    <div>\n      <div>\n        <h2>Phonebook</h2>\n        <Notification message={notificationMessage} type={notificationType} />\n        <Filter \n          nameFilter={nameFilter}\n          onInputChangeHandler={(event) => { setNameFilter(event.target.value)}}\n          onClearClickHandler={clearNameFilter}\n        />\n      </div>\n      \n      <div>\n        <h3>Add a new person</h3>\n        <PersonForm\n          onSubmit={addPerson}\n          nameValue={newName}\n          onNameChange={(event) => { setNewName(event.target.value)}}\n          numberValue={newNumber}\n          onNumberChange={(event) => { setNewNumber(event.target.value)}}\n          onClearClick={clearNewPerson}\n        />\n      </div>\n\n      <div>\n        <h3>Numbers</h3>\n        <Persons persons={personsToShow} nameFilter={nameFilter} deletePersonHandler={deletePersonHandler} />\n      </div>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}